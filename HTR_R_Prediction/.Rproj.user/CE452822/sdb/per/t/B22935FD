{
    "collab_server" : "",
    "contents" : "#initial project\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(shinycssloaders)\nlibrary(stats)\nlibrary(DT)\nlibrary(tictoc)\nlibrary(data.table)\nProjectTemplate::load.project()\nDB1.location <- \"data/transac.sqlite\"\nDB.location <- \"data/elastic.sqlite\"\nSQLtAllTables(DB1.location)\n\n\n#QUERY Data\nif(FALSE){\n  start_wk<-201501\n  end_wk<-201753\n  \n  ## Query  reference week table.  Output: wk.ref, day.ref, day.start and day.end\n  QueryReferenceWk <- function(weekstart, weekend){\n    # Query the time table from BO_Asia for time conversion \n    str.query <- sprintf(\"SELECT CALENDAR_DT, FISCAL_WK_IDNT\n                         FROM B_TIME \n                         WHERE FISCAL_WK_IDNT >= %s AND FISCAL_WK_IDNT <= %s\n                         ORDER BY CALENDAR_DT\", \n                         weekstart, weekend)\n    wk.ref <- ConSqlQuery(\"BO_Asia_UC\", str.query) # query all stores information\n    wk.ref <- wk.ref[, .(CALENDAR_DT = min(CALENDAR_DT)), by = FISCAL_WK_IDNT][order(FISCAL_WK_IDNT)]\n    \n    # Query based on day, may delete the queue above if this works\n    str.query <- sprintf(\"SELECT CALENDAR_DT, FISCAL_WK_IDNT, FISCAL_DAY_IDNT\n                         FROM B_TIME \n                         WHERE FISCAL_WK_IDNT >= %s AND FISCAL_WK_IDNT <= %s\n                         ORDER BY CALENDAR_DT\", \n                         weekstart, weekend)\n    day.ref <- ConSqlQuery(\"BO_Asia_UC\", str.query) # query all stores information\n    day.start <- day.ref[FISCAL_WK_IDNT == weekstart, ][order(CALENDAR_DT), ][1, FISCAL_DAY_IDNT]\n    day.end <- day.ref[FISCAL_WK_IDNT == weekend, ][order(-CALENDAR_DT), ][1, FISCAL_DAY_IDNT]\n    \n    return(list(day.start = day.start, \n                day.end = day.end, \n                wk.ref = wk.ref, \n                day.ref = day.ref))\n  }\n  \n  \n  str.query.raw <- \"select ITEM_KEY, POG_KEY, LOC_KEY,FIXTURE_KEY,WK_IDNT,SUBSTR(WK_IDNT,0,4) AS YR,SUBSTR(WK_IDNT,-2,2) AS WK, SALES_AMOUNT, SALES_UNIT, GROSS_MARGIN, TOTAL_MARGIN, POG_METERAGE, ITEM_METERAGE, POG_FIXTURE_EFFECTIVE_DATE, MODULE_KEY from DS_SPACE.FCT_POG_SALES_WK where WK_IDNT = %s\"\n  \n  \n  \n  # part 1: extract fact\n  \n  query.weeks <- QueryReferenceWk(start_wk, end_wk)$wk.ref$FISCAL_WK_IDNT\n  \n  #done: 201501-201512\n  #done: 201513-201526\n  #done: 201513-201526\n  #done: 201527-201537\n  #done: 201538-201652\n  \n  # Loop to grab all data\n  for(i in query.weeks){\n    tic()\n    \n    #dynamic query\n    str.query <- sprintf(str.query.raw, i)\n    fact <- ConSqlQuery(\"BO_Space\", str.query)\n    \n    # dynamic file name\n    str.filename <- sprintf(\"data/extraction_hackathon/fact%s.csv\", i)\n    \n    # writing to database\n    fwrite(fact, file = str.filename)\n    message(sprintf(\"Case %s has been queried and saved!\", i))\n    toc()\n  }\n  \n  # part 2: POG info\n  \n  str.query.POG <- \"select POG_KEY, POG_TYPE, POG_DIVISION_CODE, POG_DEPT_CODE, STATUS, POG_VERSION, POG_DEPT_NAME, POG_DIVISION_NAME\n  from DS_SPACE.DIM_POG \n  where POG_DEPT_CODE in ('02', '03', '04', '05')\"\n  \n  pog_info <- ConSqlQuery(\"BO_Space\", str.query.POG)\n  fwrite(pog_info, file = \"data/extraction_hackathon/pog_query.csv\")\n  \n  # part 3: ID Conversion\n  \n  # obtaining conversion table from space bo\n  space_id <- ConSqlQuery(\"BO_Space\", \"select ITEM_KEY, PRODUCT_CODE from DS_SPACE.DIM_POG_PRODUCT\")\n  \n  fwrite(space_id, file = \"data/extraction_hackathon/space_id.csv\")\n  \n  \n  # part 4: Generating a file for Fred's use\n  \n  # get weeks to query\n  query.weeks <- QueryReferenceWk(start_wk, end_wk)$wk.ref$FISCAL_WK_IDNT\n  \n  # loading space_id, the conversion file \n  space_id <- fread(file = \"data/extraction_hackathon/space_id.csv\")\n  \n  # loop through it\n  for(i in query.weeks){\n    \n    # defining filename \n    str.filename <- sprintf(\"data/extraction_hackathon/fact%s.csv\", i)\n    \n    study.temp <- fread(str.filename)\n    # Grouping by product per week \n    mod.study <- study.temp[, .(AVGPRICE = sum(SALES_AMOUNT)/sum(SALES_UNIT), \n                                QTY = sum(SALES_UNIT), \n                                GROSS_MARGIN = sum(GROSS_MARGIN)/sum(SALES_UNIT), \n                                AVGMARGIN = sum(TOTAL_MARGIN)/sum(SALES_UNIT)), \n                            by = c(\"ITEM_KEY\", \"WK_IDNT\",\"YR\",\"WK\")]\n    \n    # merging the PRODUCT_SKU\n    mod.study <- merge(mod.study, space_id, by = \"ITEM_KEY\", all.x = TRUE)\n    names(mod.study)[length(mod.study)] <- \"PRODUCT_SKU\"\n    \n    # Writing to local file\n    fwrite(mod.study, \"data/extraction_hackathon/product_margin.csv\", append = TRUE)\n    \n    message(sprintf(\"Week %s has been appended and saved.\", i))\n  }\n  \n  # part 5: Generating a file for Fred's use\n  \n  # get weeks to query\n  #query.weeks <- QueryReferenceWk(start_wk, end_wk)$wk.ref$FISCAL_WK_IDNT\n  \n  #for(i in query.weeks){\n  #  tic()\n  #  str.filename <- sprintf(\"data/extraction_hackathon/fact%s.csv\", i)\n  #  study.temp <- fread(str.filename)\n  #  fwrite(study.temp, \"data/extraction_hackathon/fact_pog_product.csv\", append = TRUE)\n  #  message(sprintf(\"Week %s has been saved and appended.\", i))\n  #  toc()\n  #}\n  \n  #test<-fread(\"data/extraction_hackathon/fact_pog_product.csv\")\n  \n  \n  library(data.table)\n  asd <- fread(\"data/extraction_hackathon/product_margin.csv\")\n  \n  # part 6 : Module key\n  \n  append.subd <- ConSqlQuery(\"BO_Space\", \"select MODULE_KEY, POG_CODE, SUBDEPT from DS_SPACE.DIM_POG_MODULE\")\n  pog_map <- ConSqlQuery(\"BO_Space\", \"select POG_KEY, POG_CODE from DS_SPACE.DIM_POG\")\n  pog_module <- ConSqlQuery(\"BO_Space\", \"select POG_KEY, MODULE_KEY from DS_SPACE.FCT_POG_SALES_WK where rownum <= 10\")\n  \n  pog_module <- ConSqlQuery(\"BO_Space\", \"select DISTINCT POG_KEY, MODULE_KEY from DS_SPACE.FCT_POG_SALES_WK where WK_IDNT >= 201501 AND WK_IDNT <= 201653\")\n  \n  summary(pog_module)\n  \n  \n  append.subd <- merge(append.subd, pog_map, by = \"POG_CODE\", all.x = TRUE)\n  \n  pog_map[POG_CODE == \"0200304H8\", ]\n  \n  \n  \n  # Part 7: Store data \n  \n  str.query <- (\"SELECT * FROM DS_SPACE.DIM_POG_ORGANIZATION\")\n  stores.raw <- ConSqlQuery(\"BO_Space\", str.query) # query all stores information\n  \n  # select only useful columns\n  stores <- stores.raw[, .(LOC_KEY, \n                           LOC_IDNT, \n                           LOC_NAME, \n                           ABBREVIATION, \n                           REGION,  \n                           DISTRICT, \n                           CITY,\n                           TYPE, \n                           SEGMENT, NET_TRADING_AREA, \n                           GROSS_AREA, OPENING_DATE, LAST_UPDATE_DATE, CLOSING_DATE, CURRENCY_CODE)]\n  \n  fwrite(stores, file = \"data/extraction_hackathon/stores.csv\")\n  \n  \n  \n  ConSqlQuery(\"BO_HK_UC\",\"SELECT * FROM USER_OBJECTS\")\n  bu<-ConSqlQuery(\"BO_HK_UC\",\"select * from b_BU_ATTR \")\n  SQLtWrite(DT_write = bu,\n            str.table.name = 'BU', \n            DBName = DB.location, \n            overwrite = TRUE, \n            append = FALSE)\n  product <-ConSqlQuery(\"BO_HK_UC\",\"select * from b_Product where BU_Code='PNS_WTC'\")\n  SQLtWrite(DT_write = product,\n            str.table.name = 'Product', \n            DBName = DB.location, \n            overwrite = TRUE, \n            append = FALSE)\n  str.query <- \"select bt.product_key,bt.BU_key as BU,btime.Fiscal_Wk_Idnt as timewk,SUBSTR(btime.Fiscal_Wk_Idnt,0,4) as yr,SUBSTR(btime.Fiscal_Wk_Idnt,-2,2) as wk,avg(bt.item_amt) as AVGPRICE,sum(bt.ITEM_QUANTITY_VAL) as QTY,avg(bt.ITEM_cost) as AVGCOST,(avg(bt.item_amt)- avg(bt.ITEM_cost)) as AVGMARGIN ,PRODUCT_SKU,BRAND_NAME,SUPPLIER_CODE,PRODUCT_HIER_1_L1_NAME ,PRODUCT_HIER_1_L2_NAME,PRODUCT_HIER_1_L3_NAME ,PRODUCT_HIER_1_L4_NAME ,PRODUCT_HIER_1_L5_NAME,PRODUCT_HIER_1_L6_NAME FROM ((b_transaction  bt left join b_time btime on bt.business_dt_key=btime.date_key)left join b_product bp on bp.product_key=bt.product_key) where bt.ITEM_AMT > 0 and btime.Fiscal_Wk_Idnt>=201501 and btime.Fiscal_Wk_Idnt<=201753 and KPI_EXCLUSION_FLAG='N' group by bt.product_key,bp.PRODUCT_SKU,bp.BRAND_NAME,bt.BU_KEY,btime.Fiscal_Wk_Idnt,SUPPLIER_CODE,PRODUCT_HIER_1_L1_NAME ,PRODUCT_HIER_1_L2_NAME,PRODUCT_HIER_1_L3_NAME ,PRODUCT_HIER_1_L4_NAME ,PRODUCT_HIER_1_L5_NAME,PRODUCT_HIER_1_L6_NAME \"\n  \n  \n  sale<- fread(\"data/extraction_hackathon/product_margin.csv\")\n  sale<-sale[,PRODUCT_SKU:=as.character(PRODUCT_SKU)]\n  SQLtWrite(DT_write = sale,\n            str.table.name = 'SPACESALE', \n            DBName = DB.location, \n            overwrite = TRUE, \n            append = FALSE)\n  dt<-SQLtQuery(DB.location, \" select product_key,BU_key as BU,ITEM_KEY,WK_IDNT,YR,WK,AVGPRICE,QTY,GROSS_MARGIN,AVGMARGIN,SPACESALE.PRODUCT_SKU,BRAND_NAME,SUPPLIER_CODE,PRODUCT_HIER_1_L1_NAME,PRODUCT_HIER_1_L2_NAME,PRODUCT_HIER_1_L3_NAME ,PRODUCT_HIER_1_L4_NAME ,PRODUCT_HIER_1_L5_NAME,PRODUCT_HIER_1_L6_NAME from SPACESALE left join product on SPACESALE.PRODUCT_SKU = product.PRODUCT_SKU where AVGPRICE is not null \")\n  SQLtWrite(DT_write = dt,\n            str.table.name = 'SPACEWKSales', \n            DBName = DB.location, \n            overwrite = TRUE, \n            append = FALSE)\n  \n  customfunc <- function(dt){\n    maxprice<-unique(dt[AVGPRICE==max(AVGPRICE),AVGPRICE])\n    minprice<-unique(dt[AVGPRICE==min(AVGPRICE),AVGPRICE])\n    fit <- lm(QTY ~I(AVGPRICE^2)+AVGPRICE, dt)\n    maxquan<-predict(fit,data.frame(AVGPRICE=maxprice))\n    minquan<-predict(fit,data.frame(AVGPRICE=minprice))\n    elasticlinear<-(maxquan-minquan)/(maxprice-minprice)*(maxprice+minprice)/(maxquan+minquan)\n    \n    return(elasticlinear)\n  }\n  test<-dt[, .(.N,AVGPRICE,QTY), by = PRODUCT_KEY][N>1&!is.na(AVGPRICE)&!is.infinite(QTY)&!is.infinite(AVGPRICE)&!is.na(QTY),]\n  elasticitydt<-unique(test[, elasticity:=customfunc(.SD), by=PRODUCT_KEY][,.(PRODUCT_KEY,N,elasticity)])\n  \n  SQLtWrite(DT_write = elasticitydt,\n            str.table.name = 'elasticity', \n            DBName = DB.location, \n            overwrite = TRUE, \n            append = FALSE)\n  \n  \n  \n  \n  SQLtQuery(DB.location,\"CREATE INDEX product_key_index ON 'SPACEWKSales' (PRODUCT_KEY)\")\n  SQLtQuery(DB.location,\"CREATE INDEX productkey_index ON 'Product' (PRODUCT_KEY)\")\n  SQLtQuery(DB.location,\"CREATE INDEX productkey_forel_index ON 'elasticity' (PRODUCT_KEY)\")\n  SQLtQuery(DB.location,\"vacuum\")\n}\n\ndt<-as.data.table(SQLtQuery(DB.location, \"SELECT * FROM 'SPACEWKSales'\"))\nproduct <-as.data.table(SQLtQuery(DB.location, \"SELECT * FROM 'PRODUCT'\"))\nbudt <-as.data.table(SQLtQuery(DB.location, \"SELECT * FROM 'BU'\"))\nelasticitydt<-as.data.table(SQLtQuery(DB.location, \"SELECT * FROM 'elasticity'\"))\n\n\n\n\nlibrary(shiny)\n#Shiny UI\nui <- fluidPage(\n  \n  tabsetPanel(type = \"tabs\", \n              #First Tab\n              tabPanel(\"Price/QTY\",\n                       \n                       pageWithSidebar(\n                         headerPanel('Price Elasticity'),\n                         sidebarPanel(\n                           sliderInput(\"sliderYear\", label = \"Year Range\", min = 2015, \n                                       max = 2017, value = c(2015, 2017))\n                           \n                           ,\n                           sliderInput(\"sliderWeek\", label = \"Week Range\", min = 1, \n                                       max = 53, value = c(1, 53))\n                           , checkboxInput(\"WKinvert\", \"Invert Week Range:\"\n                           ),\n                           \n                           selectInput(\"Selection\", \"Select:\",\n                                       c(\"Product Key\" = \"PK\",\n                                         \"BU + SKU \" = \"BUSKU\",\n                                         \"BU + Category\" = \"Cat\",\n                                         \"BU + Brand\" = \"BUBrand\",\n                                         \"Brand\" = \"Brand\"\n                                       )),\n                           \n                           numericInput('Product', 'Product Key',2055408),\n                           \n                           \n                           selectInput('BUNAME','BU Name',unique(budt[order(is.na(BU_NAME)),BU_NAME]),selected = \"Retail Hong Kong\"),\n                           textOutput('bureact'),\n                           numericInput('SKU', 'SKU',106822),\n                           uiOutput('brand'),\n                           uiOutput('H1L3'),\n                           uiOutput('H1L2'),\n                           uiOutput('cat'),\n                           actionButton(\"go\", \"Go\")\n                           \n                           \n                         ),mainPanel(\n                           #Plot\n                           plotOutput('plot1')\n                           #Product Name for plot\n                           ,\n                           htmlOutput('product')\n                           #Prediction\n                           ,\n                           numericInput('PRED', 'Price for prediction',100)\n                           ,\n                           textOutput('prediction')\n                           ,\n                           textOutput('lmprediction')\n                           ,\n                           textOutput('lm2prediction')\n                           ,\n                           #elasticity\n                           textOutput('elasticity')\n                           #,\n                           #textOutput('slinelastic')\n                           #,\n                           #textOutput('unitelasticity')\n                           #,\n                           #textOutput('slelastic')\n                           \n                           \n                           \n                           \n                           \n                         )\n                         \n                         \n                         \n                       )),\n              #Season Tab\n              tabPanel(\"Price/QTY in Season\",\n                       mainPanel(\n                         column(12, align=\"center\",plotOutput('plot3'),\n                                fluidRow( column(6,plotOutput('plotseason1'),\"Spring\"),\n                                          column(6,plotOutput('plotseason2'),\"Summer\")\n                                ),\n                                fluidRow(\n                                  column(6,plotOutput('plotseason3'),\"Autumn\"),\n                                  column(6,plotOutput('plotseason4'),\"Winter\")\n                                )\n                         )))\n              \n              ,\n              #Margin vs QTY Tab\n              tabPanel(\"Average Margin/QTY \",\n                       \n                       headerPanel('Product Margin'),\n                       \n                       \n                       mainPanel(\n                         plotOutput('plot4')\n                       )),\n              #MARGIN*QTY Tab\n              tabPanel(\"Margin*QTY/Price \",\n                       \n                       headerPanel('Product Margin'),\n                       \n                       mainPanel(\n                         plotOutput('plot5')\n                         ,\n                         textOutput('marginprediction')\n                       ))\n              ,\n              #Compare with same brand, category or other product\n              tabPanel(\"Compare\",\n                       \n                       headerPanel('Product Elasticity Compare'),\n                       sidebarPanel(\n                         \n                         selectInput(\"Compare\", \"Compare to plot:\",\n                                     c(\"Brand\" = \"brand\",\n                                       \"Category\" = \"CategoryH1L1\",\n                                       \"Product\" = \"product\")),\n                         numericInput('Product.C', 'Product Key',2135277),\n                         \n                         actionButton(\"comparego\", \"Go\")\n                         \n                       ),\n                       mainPanel(\n                         plotOutput('plot6')\n                       ))\n              ,\n              #elasticity Datatable\n              tabPanel(\"DT for Elasticity\",\n                       \n                       headerPanel('Product Elasticity DataTable'),\n                       mainPanel(\n                         dataTableOutput(\"elasticdt\")\n                       ))\n              \n  ))\n\n\n\n\n#Shiny Server\n\nserver <- function(input, output, session) {\n  #filter data\n  datafinal<-eventReactive(input$go, {\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    \n    if(input$WKinvert==TRUE){\n      filterdt1<-dt[YR>=input$sliderYear[1] & YR<=input$sliderYear[2] &( WK<=input$sliderWeek[1] | WK>=input$sliderWeek[2]),]\n      \n    }\n    else{\n      filterdt1<-dt[YR>=input$sliderYear[1] & YR<=input$sliderYear[2] & WK>=input$sliderWeek[1] & WK<=input$sliderWeek[2],]\n      \n    }\n    \n    \n    if(input$Selection == \"PK\"){\n      filterdt<-filterdt1[PRODUCT_KEY == input$Product, ]}\n    else if (input$Selection == \"BUSKU\"){\n      filterdt<-filterdt1[BU == bu & PRODUCT_SKU==input$SKU, ]\n    }\n    else if(input$Selection == \"Cat\"){\n      filterdt<-filterdt1[BU == bu & PRODUCT_HIER_1_L1_NAME == input$Cate, ]\n    }\n    else if (input$Selection == \"Brand\"){\n      filterdt<-filterdt1[BRAND_NAME == input$Brand, ]\n    }\n    else if (input$Selection == \"BUBrand\"){\n      filterdt<-filterdt1[BU == bu & BRAND_NAME == input$Brand, ]\n    }\n    else {filterdt<-as.data.table(data.frame)}\n    \n    return(filterdt)\n  })\n  \n  #Select Bu name output BU Key\n  \n  output$bureact<- renderText({\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY]\n    \n    paste(\" BU Key :\",paste(bu,collapse = \",\"),sep=\"\")\n  })\n  \n  #list of H1L3 selection\n  H1L3 <- reactive({\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    vars <- unique(dt[BU==bu ,][order(PRODUCT_HIER_1_L3_NAME),PRODUCT_HIER_1_L3_NAME])\n    vars <- as.list(vars)\n    return(vars)\n  })\n  #select H1L3\n  output$H1L3 = renderUI({\n    selectInput(\"H1L3\", \"Product H1L3:\",H1L3()\n                ,multiple =TRUE)\n  })\n  \n  #list of H1L2 selection\n  H1L2 <- reactive({\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    vars <- unique(dt[BU==bu & PRODUCT_HIER_1_L3_NAME==input$H1L3 ,][order(PRODUCT_HIER_1_L2_NAME),PRODUCT_HIER_1_L2_NAME])\n    vars <- as.list(vars)\n    return(vars)\n  })\n  \n  #select H1L2\n  output$H1L2 = renderUI({\n    selectInput(\"H1L2\", \"Product H1L2:\",H1L2(),selected=H1L2()\n                ,multiple =TRUE)\n  })\n  \n  \n  #list of H1L1 selection\n  H1L1 <- reactive({\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    vars <- unique(dt[BU==bu & PRODUCT_HIER_1_L3_NAME==input$H1L3 & PRODUCT_HIER_1_L2_NAME==input$H1L2,][order(PRODUCT_HIER_1_L1_NAME),PRODUCT_HIER_1_L1_NAME])\n    vars <- as.list(vars)\n    return(vars)\n  })\n  \n  #select H1L1\n  output$cat = renderUI({\n    selectInput(\"Cate\", \"Product H1L1:\",H1L1(),selected=H1L1()\n                ,multiple =TRUE)\n  })\n  #list of brand selection for BUBRAND and Brand\n  Brand <- reactive({\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY]\n    if (input$Selection == \"Brand\"){\n      vars <- unique(dt[order(BRAND_NAME),BRAND_NAME])\n    }\n    else if (input$Selection == \"BUBrand\"){\n      vars <- unique(dt[BU==bu,][order(BRAND_NAME),BRAND_NAME])\n    }\n    else{\n      vars <- unique(dt[order(BRAND_NAME),BRAND_NAME])\n    }\n    \n    \n    vars <- as.list(vars)\n    return(vars)\n  })\n  \n  #Select Brand\n  output$brand = renderUI({\n    selectInput(\"Brand\", \"Brand:\",Brand()\n                ,multiple =TRUE)\n  })\n  \n  #Fit loess  Model\n  dtmodel<-reactive({\n    #if(datafinal()[,.N<=1000]){\n    fitloess <- loess(QTY ~ AVGPRICE, datafinal())\n    \n    # }\n    #else{fit <- mgcv::gam(formula = QTY ~ AVGPRICE, data = datafinal())}\n    \n    return(fitloess)\n  })\n  \n  #Fit predict loess Model\n  dtpred<-reactive({\n    #if(datafinal()[,.N<=1000])\n    #{\n    prediction<-predict(dtmodel(), data.frame(AVGPRICE=input$PRED))\n    # }\n    # else\n    # {prediction<-mgcv::predict.gam(dtmodel(), data = list(input$PRED))\n    #  }\n    \n    return(prediction)\n  })\n  \n  #Define plot method (non using)\n  plotmethod<-reactive({\n    #if(datafinal()[,.N<=1000])\n    #{\n    method<-\"loess\"\n    # }\n    #else if (datafinal()[,.N>1000])\n    #{method<-\"gam\"\n    #}\n    # else{\n    #method<-\"auto\"\n    #}\n    \n    return(method)\n  })\n  \n  #output prediction result of loess model for price input\n  output$prediction<-renderText({\n    \n    predfin<-ifelse(dtpred() <0 ,0 , dtpred())\n    paste(\"The LOESS Model sales prediction for price=\", input$PRED,\" is:\" ,predfin,sep=\"\")\n  })\n  #output prediction result of linear model for price input\n  output$lmprediction<-renderText({\n    fitlm<-lm(QTY ~ AVGPRICE, datafinal())\n    \n    prediction<-predict.lm(fitlm, data.frame(AVGPRICE=input$PRED))\n    predfin<-ifelse(prediction <0 ,0 , prediction)\n    paste(\"The Linear Regression Model sales prediction for price=\", input$PRED,\" is:\" ,predfin,sep=\"\")\n  })\n  #output prediction result of quadratic model  for price input\n  output$lm2prediction<-renderText({\n    fitlm2<-lm(QTY ~ poly(AVGPRICE,2), datafinal())\n    prediction<-predict.lm(fitlm2, data.frame(AVGPRICE=input$PRED))\n    predfin<-ifelse(prediction <0 ,0 , prediction)\n    paste(\"The Regression Model(Quadratic) sales prediction for price=\", input$PRED,\" is:\" ,predfin,sep=\"\")\n  })\n  \n  #Calculate elasticity (non using)\n  elast<-reactive({\n    \n    \n    predfin<-ifelse(dtpred() <0 ,0 , dtpred())\n    predictionlow<-predict(dtmodel(), data.frame(AVGPRICE=input$PRED-1))\n    predictionup<-predict(dtmodel(), data.frame(AVGPRICE=input$PRED+1))\n    \n    elasticup<-((predictionup-predfin)/(predictionup+predfin)*2)/((input$PRED+1-input$PRED)/(input$PRED+1+input$PRED)*2)\n    \n    fit <- lm(QTY ~ poly(AVGPRICE,2), data=datafinal())\n    \n    slope<-fit$coefficients[2]+fit$coefficients[3]*2*input$PRED\n    unitelastic<-(fit$coefficients[2]+1)/(fit$coefficients[3]*2)*-1*input$PRED/predfin\n    slightlyelastic<-(fit$coefficients[2]+0.75)/(fit$coefficients[3]*2)*-1*input$PRED/predfin\n    slightlyinelastic<-(fit$coefficients[2]+1.33333)/(fit$coefficients[3]*2)*-1*input$PRED/predfin\n    elast_ls<-list(predfin,predictionlow,predictionup,elasticup,fit,slope,unitelastic,slightlyelastic,slightlyinelastic)\n    return(elast_ls)\n    \n  }\n  )\n  \n  #output elasticity\n  output$elasticity<-renderText({\n    #fitlm2<-lm(QTY ~ poly(AVGPRICE,2), datafinal())\n    #prediction<-predict.lm(fitlm2, data.frame(AVGPRICE=input$PRED))\n    #predfin<-ifelse(prediction <0 ,0 , prediction)\n    #POE<-ifelse((elast()[6]*input$PRED/predfin)>0,0,(elast()[6]*input$PRED/predfin))\n    \n    \n    \n    maxprice<-unique(datafinal()[AVGPRICE==max(AVGPRICE),AVGPRICE])\n    minprice<-unique(datafinal()[AVGPRICE==min(AVGPRICE),AVGPRICE])\n    \n    fit <- lm(QTY ~ poly(AVGPRICE,2), datafinal())\n    maxquan<-predict(fit,data.frame(AVGPRICE=maxprice))\n    minquan<-predict(fit,data.frame(AVGPRICE=minprice))\n  \n    elasticlinear<-(maxquan-minquan)/(maxprice-minprice)*(maxprice+minprice)/(maxquan+minquan)\n    \n    \n    \n    if( elasticlinear > 1){\n      elast_def<-\"elastic\"\n    }\n    else if(elasticlinear == 1){\n      elast_def<-\"unit elasticity\"\n    }\n    else if ( elasticlinear < 1){\n      elast_def<-\"inelastic\"\n    }\n    else {\n      elast_def<-\"error\"\n    }\n    paste(\"The price elasticity for demand is:\",elast_def,sep=\"\")\n    \n    \n    \n    \n  })\n  \n  #Calculate unit elastic price (non using)\n  output$unitelasticity<-renderText({\n    paste(\"The unit elastic at price =\",elast()[7],sep=\"\")\n  })\n  #Calculate slightly elastic price (non using)\n  output$slinelastic<-renderText({\n    paste(\"The curve is slightly inelastic at price =\",elast()[8],sep=\"\")\n  })\n  #Calculate slightly ubelastic price (non using)\n  output$slelastic<-renderText({\n    paste(\"The curve is slightly elastic at price =\",elast()[9],sep=\"\")\n  })\n  \n  #output Product name\n  \n  output$product<-renderUI({\n    bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    \n    if(input$Selection == \"PK\"){\n      productname<-product[PRODUCT_KEY==input$Product,c(PRODUCT_NAME,PRODUCT_OTHER_NAME)]\n      productkey<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_KEY])\n      listh1l4<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_HIER_1_L4_NAME])\n      listh1l3<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_HIER_1_L3_NAME])\n      listh1l2<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_HIER_1_L2_NAME])\n      listcat<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_HIER_1_L1_NAME])\n      brand<-unique(product[PRODUCT_KEY==input$Product,BRAND_NAME])\n      bu<-product[PRODUCT_KEY==input$Product,BU_KEY] \n      buname<-budt[BU_KEY==bu,BU_NAME]\n      sku<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_SKU])\n      if(!is.na(productname[2])|bu==9){\n        product.name<-productname[2]\n      }else{\n        product.name<-productname[1]\n      }\n      HTML(paste(\"<b>\",\n                 paste(\"The Price/QTY plot of \", product.name,sep=\"\"),\"</b>\",\n                 \"<br>\",\"Product Key: \",productkey,\n                 \"<br>\",\"BU :\", buname,\"(BU Key: \",bu,\" )\",\n                 \"<br>\",\"SKU : \",sku,\n                 \"<br>\",\"Brand : \",brand,\n                 \"<br>\",\"Group : \",listh1l4,\n                 \"<br>\",\"Department : \",listh1l3,\n                 \"<br>\",\"Class : \",listh1l2,\n                 \"<br>\",\"Sub-Class : \",listcat\n      ))\n    }\n    else if (input$Selection == \"BUSKU\"){\n      productname<-product[BU_KEY == bu & PRODUCT_SKU==input$SKU,c(PRODUCT_NAME,PRODUCT_OTHER_NAME)]\n      if(!is.na(productname[2])|bu==9){\n        product.name<-productname[2]\n      }else{\n        product.name<-productname[1]\n      }\n      productkey<-unique(product[BU_KEY == bu & PRODUCT_SKU==input$SKU,PRODUCT_KEY])\n      listh1l4<-unique(product[BU_KEY == bu & PRODUCT_SKU==input$SKU,PRODUCT_HIER_1_L4_NAME])\n      listh1l3<-unique(product[BU_KEY == bu & PRODUCT_SKU==input$SKU,PRODUCT_HIER_1_L3_NAME])\n      listh1l2<-unique(product[BU_KEY == bu & PRODUCT_SKU==input$SKU,PRODUCT_HIER_1_L2_NAME])\n      listcat<-unique(product[BU_KEY == bu & PRODUCT_SKU==input$SKU,PRODUCT_HIER_1_L1_NAME])\n      brand<-unique(product[BU_KEY == bu & PRODUCT_SKU==input$SKU,BRAND_NAME])\n      buname<-budt[BU_KEY==bu,BU_NAME]\n      \n      \n      HTML(paste(\"<b>\",\n                 paste(\"The Price/QTY plot of \", product.name,sep=\"\"),\"</b>\",\n                 \"<br>\",\"Product Key: \",productkey,\n                 \"<br>\",\"BU :\", buname,\"(BU Key: \",bu,\" )\",\n                 \"<br>\",\"SKU : \",input$SKU,\n                 \"<br>\",\"Brand : \",brand,\n                 \"<br>\",\"Group : \",listh1l4,\n                 \"<br>\",\"Department : \",listh1l3,\n                 \"<br>\",\"Class : \",listh1l2,\n                 \"<br>\",\"Sub-Class : \",listcat\n                 \n      ))\n    }\n    else if(input$Selection == \"Cat\"){\n      \n      listh1l3<-paste(input$H1L3,collapse=\",\")\n      listh1l2<-paste(input$H1L2,collapse=\",\")\n      listcat<-paste(input$Cate,collapse=\",\")\n      \n      \n      HTML(paste(\"The Price/QTY plot of products in Category:\",listh1l3,\" --> \",listh1l2, \" --> \", listcat,sep=\"\"))\n      \n    }\n    else if (input$Selection == \"Brand\"){\n      HTML(paste(\"The Price/QTY plot of products in Brand:\",  paste(input$Brand,collapse=\",\"),sep=\"\"))\n    }\n    else if (input$Selection == \"BUBrand\"){\n      countryname<-unique(product[BU_KEY == bu,COUNTRY_NAME])\n      HTML(paste(\"The Price/QTY plot of products in Brand:\",paste(input$Brand,collapse=\",\"),\" in country: \", countryname,sep=\"\"))\n    }\n    else {}\n    \n    \n    \n  })\n  \n  \n  \n  #Plot QTY vs AVGPRICE\n  output$plot1 <- renderPlot({\n    ggplot(datafinal(),aes( x=AVGPRICE,y=QTY)) + geom_point()+geom_smooth(formula=y~poly(x,2),method=lm,  se=TRUE)+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n    \n  })\n  \n  #Split data to season\n  datasplit<-reactive({\n    originaldt<-as.data.table(datafinal())\n    spring<-originaldt[WK>=1 & WK<=13]\n    summer<-originaldt[WK>=14 & WK<=27]\n    autumn<-originaldt[WK>=28 & WK<=40]\n    winter<-originaldt[WK>=41 & WK<=53]\n    dtlist<-list(spring,summer,autumn,winter)\n    return(dtlist)\n  })\n  \n  \n  #Plot Spring\n  output$plotseason1 <- renderPlot({\n    dt1<-as.data.table(datasplit()[1][[1]])\n    ggplot(dt1,aes( x=AVGPRICE,y=QTY)) + geom_point()+geom_smooth(formula=y~poly(x,2)+x,method=lm,  se=TRUE)+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+\n      labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n    \n  })\n  \n  #Plot Summer\n  output$plotseason2 <- renderPlot({\n    \n    dt2<-as.data.table(datasplit()[2][[1]])\n    ggplot(dt2,aes( x=AVGPRICE,y=QTY)) + geom_point()+geom_smooth(formula=y~poly(x,2)+x,method=lm,  se=TRUE)+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+\n      labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n    \n  })\n  \n  #Plot Autumn\n  output$plotseason3 <- renderPlot({\n    \n    dt3<-as.data.table(datasplit()[3][[1]])\n    ggplot(dt3,aes( x=AVGPRICE,y=QTY)) + geom_point()+geom_smooth(formula=y~poly(x,2)+x,method=lm,  se=TRUE)+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+\n      labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n    \n    \n  })\n  \n  #Plot Winter\n  output$plotseason4 <- renderPlot({\n    \n    dt4<-as.data.table(datasplit()[4][[1]])\n    ggplot(dt4,aes( x=AVGPRICE,y=QTY)) + geom_point()+geom_smooth(formula=y~poly(x,2)+x,method=lm,  se=TRUE)+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+\n      labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n    \n  })\n  \n  #Plot QTY VS AVGPICE /w color=week\n  output$plot3 <- renderPlot({\n    \n    ggplot(datafinal(),aes( x=AVGPRICE,y=QTY,colour=as.numeric(WK))) + geom_point()+geom_smooth(formula=y~poly(x,2)+x,method=lm,  se=TRUE) + scale_colour_gradient(high=\"red\",low=\"blue\")+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+\n      labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n  })\n  \n  #Plot QTY vs MARGIN\n  output$plot4 <- renderPlot({\n    \n    ggplot(datafinal(),aes( x=AVGMARGIN,y=QTY)) + geom_point()+geom_smooth(method=loess,  se=TRUE) +\n      labs(x = \"Weekly Average Margin\",y=\"Weekly Total Sales\")\n  })\n  \n  #Plot QTY vs MARGIN*AVGPRICE\n  output$plot5 <- renderPlot({\n    fitloess <- loess((QTY*AVGMARGIN) ~ AVGPRICE, datafinal())\n    maxpred<-max(predict(fitloess,seq(unique(datafinal()[AVGPRICE==min(AVGPRICE),][,AVGPRICE]),unique(datafinal()[AVGPRICE==max(AVGPRICE),][,AVGPRICE]),0.01)),na.rm = TRUE)\n    predtable<-as.data.table(cbind(seq(unique(datafinal()[AVGPRICE==min(AVGPRICE),][,AVGPRICE]),unique(datafinal()[AVGPRICE==max(AVGPRICE),][,AVGPRICE]),0.01),predict(fitloess,seq(unique(datafinal()[AVGPRICE==min(AVGPRICE),][,AVGPRICE]),unique(datafinal()[AVGPRICE==max(AVGPRICE),][,AVGPRICE]),0.01))))\n    colnames(predtable)<-c(\"x\",\"y\")\n    maxpred.corx<-predtable[y==maxpred,x]\n    ggplot(datafinal(),aes( x=AVGPRICE,y=AVGMARGIN*QTY)) + geom_point()+geom_smooth(method=loess,  se=TRUE)+geom_hline(yintercept=maxpred, linetype=\"dashed\", color = \"red\")+geom_vline(xintercept=maxpred.corx, linetype=\"dashed\", color = \"red\")+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+\n      labs(x = \"Weekly Average Price\",y=\"Weekly Total Profit\")\n  })\n  \n  #output maximum point of MARGIN*PRICE prediction and corresponding x value\n  output$marginprediction<-renderText({\n    fitloess <- loess((QTY*AVGMARGIN) ~ AVGPRICE, datafinal())\n    maxpred<-max(predict(fitloess,seq(unique(datafinal()[AVGPRICE==min(AVGPRICE),][,AVGPRICE]),unique(datafinal()[AVGPRICE==max(AVGPRICE),][,AVGPRICE]),0.01)),na.rm = TRUE)\n    predtable<-as.data.table(cbind(seq(unique(datafinal()[AVGPRICE==min(AVGPRICE),][,AVGPRICE]),unique(datafinal()[AVGPRICE==max(AVGPRICE),][,AVGPRICE]),0.01),predict(fitloess,seq(unique(datafinal()[AVGPRICE==min(AVGPRICE),][,AVGPRICE]),unique(datafinal()[AVGPRICE==max(AVGPRICE),][,AVGPRICE]),0.01))))\n    colnames(predtable)<-c(\"x\",\"y\")\n    maxpred.corx<-predtable[y==maxpred,x]\n    paste(\"The Maximum QTY*AVGMARGIN is \",maxpred,\" at price= \",maxpred.corx, sep=\"\")\n    \n  })\n  \n  \n  #Compore selection datafilter\n  datacompare<-eventReactive(input$comparego,{\n    if(input$WKinvert==TRUE){\n      filterdt1<-dt[YR>=input$sliderYear[1] & YR<=input$sliderYear[2] &( WK<=input$sliderWeek[1] | WK>=input$sliderWeek[2]),]\n      \n    }\n    else{\n      filterdt1<-dt[YR>=input$sliderYear[1] & YR<=input$sliderYear[2] & WK>=input$sliderWeek[1] & WK<=input$sliderWeek[2],]\n      \n    }\n    \n    if(input$Compare==\"brand\"){\n      comparedt<-filterdt1[BRAND_NAME==unique(datafinal()[,BRAND_NAME]),]\n    }\n    else if (input$Compare==\"CategoryH1L1\"){\n      comparedt<-filterdt1[PRODUCT_HIER_1_L1_NAME==unique(datafinal()[,PRODUCT_HIER_1_L1_NAME]),]\n    }\n    else if(input$Compare==\"product\"){\n      comparedt<-filterdt1[PRODUCT_KEY==input$Product.C,]\n    }\n    return(comparedt)\n    \n  })\n  #plot compare\n  output$plot6 <- renderPlot({\n    filterdt1<-datafinal()[,Type:=\"Original\"]\n    filterdt2<-datacompare()[,Type:=\"Compare\"]\n    appenddt<-rbind(filterdt1,filterdt2)\n    \n    \n    if(input$Compare==\"product\"){\n    ggplot(appenddt,aes( x=AVGPRICE,y=QTY))+ geom_point(aes(colour=factor(Type)) ) + scale_colour_manual(values = c(\"red\", \"blue\"))+geom_smooth(data = filterdt1,formula=y~poly(x,2),method=lm,  se=TRUE,colour='blue')+geom_smooth(data = filterdt2,formula=y~poly(x,2),method=lm,  se=TRUE,colour='red')+\n        labs(x = \"Weekly Average Price\",y=\"Weekly Total Sales\")\n    }\n    else{\n      \n      ggplot(datafinal(),aes( x=AVGPRICE,y=QTY)) + geom_point()+geom_smooth(formula=y~poly(x,2),method=lm,  se=TRUE,colour=\"blue\")+ geom_smooth(data = datacompare(),formula=y~poly(x,2),method=lm,  se=TRUE,colour='red')+xlim(c((min(datafinal()[,AVGPRICE])-0.25*sd(datafinal()[,AVGPRICE])),(max(datafinal()[,AVGPRICE])+0.25*sd(datafinal()[,AVGPRICE]))))+ scale_fill_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\"), \n                                                                                                                                                                                                                                                                                                                                                                                   name=\"Experimental\\nCondition\",\n                                                                                                                                                                                                                                                                                                                                                                                   breaks=c(\"ctrl\", \"trt1\", \"trt2\"),\n                                                                                                                                                                                                                                                                                                                                                                                   labels=c(\"Control\", \"Treatment 1\", \"Treatment 2\"))\n      \n    }\n    \n    \n  })\n  #Datatable for elasticity\n  output$elasticdt<-renderDataTable({\n    datatable(elasticitydt,options = list(pageLength = 50))\n  }\n  )\n}\n\n\nshinyApp(ui, server)\n\n",
    "created" : 1529734683040.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3404059832",
    "id" : "B22935FD",
    "lastKnownWriteTime" : 1517081100,
    "last_content_update" : 1517081100,
    "path" : "C:/Users/Larry/Desktop/price_el/src/price shiny space.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}