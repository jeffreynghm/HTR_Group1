{
    "collab_server" : "",
    "contents" : "#initial project\nlibrary(ggplot2)\nlibrary(shinythemes)\nlibrary(shiny)\nlibrary(shinycssloaders)\nlibrary(stats)\nlibrary(DT)\nlibrary(tictoc)\nlibrary(data.table)\nProjectTemplate::load.project()\n#DB1.location <- \"data/transac.sqlite\"\n#DB.location <- \"data/elastic.sqlite\"\n#SQLtAllTables(DB1.location)\n\n#QUERY Data\nif(FALSE){\nConSqlQuery(\"BO_HK_UC\",\"SELECT * FROM USER_OBJECTS\")\nproduct <-SQLtQuery(DB1.location,\"select * from Product\")\nSQLtWrite(DT_write = product,\n          str.table.name = 'Product_margin', \n          DBName = DB.location, \n          overwrite = TRUE, \n          append = FALSE)\nWeek <-SQLtQuery(DB1.location,\"select * from Week\")\nSQLtWrite(DT_write = Week,\n          str.table.name = 'week', \n          DBName = DB.location, \n          overwrite = TRUE, \n          append = FALSE)\n\ntemp<-fread(paste(\"C:/Users/Larry/Documents/aswhackerathon/ASWatson/product_margin.csv\",sep=\"\")) \n\n\n\nSQLtWrite(DT_write = temp,\n          str.table.name = 'WKSales', \n          DBName = DB.location, \n          overwrite = TRUE, \n          append = FALSE)\nSQLtQuery(DB.location,\"Select * from WKSales left join Week on WK_Start_DT=WK_Start_Date\")\n\n\n#customfunc <- function(dt){\n#  maxprice<-unique(dt[AVGPRICE==max(AVGPRICE),AVGPRICE])\n#  minprice<-unique(dt[AVGPRICE==min(AVGPRICE),AVGPRICE])\n#  fit <- lm(QTY ~I(AVGPRICE^2)+AVGPRICE, dt)\n#  maxquan<-predict(fit,data.frame(AVGPRICE=maxprice))\n#  minquan<-predict(fit,data.frame(AVGPRICE=minprice))\n#  elasticlinear<-(maxquan-minquan)/(maxprice-minprice)*(maxprice+minprice)/(maxquan+minquan)\n  \n#  return(elasticlinear)\n#}\n#test<-transaction.table[, .(.N,AVGPRICE,QTY), by = PRODUCT_KEY][N>1&!is.na(AVGPRICE)&!is.infinite(QTY)&!is.infinite(AVGPRICE)&!is.na(QTY),]\n#elasticitydt<-unique(test[, elasticity:=customfunc(.SD), by=PRODUCT_KEY][,.(PRODUCT_KEY,N,elasticity)])\n\n#SQLtWrite(DT_write = elasticitydt,\n#          str.table.name = 'elasticity', \n#          DBName = DB.location, \n#          overwrite = TRUE, \n#          append = FALSE)\n\n\n\n#SQLtQuery(DB.location,\"CREATE INDEX product_key_index ON 'WKSales' (PRODUCT_KEY)\")\n#SQLtQuery(DB.location,\"CREATE INDEX productkey_index ON 'Product' (PRODUCT_KEY)\")\n#SQLtQuery(DB.location,\"CREATE INDEX productkey_forel_index ON 'elasticity' (PRODUCT_KEY)\")\n#SQLtQuery(DB.location,\"vacuum\")\n}\n\n\n#Load Data\ndt<-stathostpital\nproduct <-unique(stathostpital[,TYPE])\n#elasticitydt<-as.data.table(SQLtQuery(DB.location, \"SELECT * FROM 'elasticity'\"))\n\nlibrary(shiny)\n#Shiny UI\nui <- fluidPage(\n  \n  tabsetPanel(type = \"tabs\", \n              #First Tab\n              tabPanel(\"Price/QTY\",\n                       \n                       pageWithSidebar(\n                         headerPanel('Price Elasticity'),\n                         sidebarPanel(\n                           \n                           \n                           selectInput(\"Selection\", \"Select:\",\n                                       c(\"Total bill\" = \"TB\",\n                                         \"No. of Day\" = \"ND\"\n                                         \n                                         \n                                         \n                                         \n                                       )),\n                           \n                           \n                           \n                           uiOutput('brand'),\n                           uiOutput('brand2'),\n                           #uiOutput('H1L3'),\n                           #uiOutput('H1L2'),\n                           \n                          # uiOutput('cat'),\n                           \n                           actionButton(\"go\", \"Go\")\n                           \n                           \n                         ),mainPanel(\n                           #Plot\n                           plotOutput('plot1')\n                           #Product Name for plot\n                           ,\n                           htmlOutput('product')\n                           #Prediction\n                           ,\n                           numericInput('PRED', 'Price for prediction',100)\n                           ,\n                           textOutput('prediction')\n                           ,\n                           textOutput('lmprediction')\n                           ,\n                           textOutput('lm2prediction')\n                           ,\n                           #elasticity\n                           textOutput('elasticity')\n                           #,\n                           #textOutput('slinelastic')\n                           #,\n                           #textOutput('unitelasticity')\n                           #,\n                           #textOutput('slelastic')\n                           \n                           \n                           \n                           \n                           \n                         )\n                         \n                         \n                         \n                       )),\n              #Season Tab\n              tabPanel(\"Price/QTY in Season\",\n                       mainPanel(\n                         column(12, align=\"center\",plotOutput('plot3'),\n                                fluidRow( column(6,plotOutput('plotseason1'),\"Spring\"),\n                                          column(6,plotOutput('plotseason2'),\"Summer\")\n                                ),\n                                fluidRow(\n                                  column(6,plotOutput('plotseason3'),\"Autumn\"),\n                                  column(6,plotOutput('plotseason4'),\"Winter\")\n                                )\n                         )))\n              \n              ,\n              #Margin vs QTY Tab\n              tabPanel(\"Average Margin/QTY \",\n                       \n                       headerPanel('Product Margin'),\n                       \n                       \n                       mainPanel(\n                         plotOutput('plot4')\n                       )),\n              #MARGIN*QTY Tab\n              tabPanel(\"TotalMargin/Price \",\n                       \n                       headerPanel('Product Margin'),\n                       \n                       mainPanel(\n                         plotOutput('plot5')\n                         ,\n                         textOutput('marginprediction')\n                       ))\n              ,\n              #Compare with same brand, category or other product\n              tabPanel(\"Compare\",\n                       \n                       headerPanel('Product Elasticity Compare'),\n                       sidebarPanel(\n                         \n                         selectInput(\"Compare\", \"Compare to plot:\",\n                                     c(\"Brand\" = \"brand\",\n                                       \"Category\" = \"CategoryH1L1\",\n                                       \"Product\" = \"product\")),\n                         numericInput('Product.C', 'Product Key',154648),\n                         \n                         actionButton(\"comparego\", \"Go\")\n                         \n                       ),\n                       mainPanel(\n                         plotOutput('plot6')\n                       ))\n              \n  ))\n\n\n\n\n#Shiny Server\n\nserver <- function(input, output, session) {\n  #filter data\n  datafinal<-eventReactive(input$go, {\n    #bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    filterdt1<-dt\n    \n    if(input$Selection == \"PK\"){\n      filterdt<-filterdt1[PRODUCT_ID == input$Product, ]}\n    else if(input$Selection == \"TB\"){\n      filterdt<-filterdt1[\"Operation..indexed.\" == input$brand2, ]\n    }\n    else if (input$Selection == \"Brand\"){\n      filterdt<-filterdt1[BRAND_NAME == input$Brand, ]\n    }\n    else {filterdt<-as.data.table(data.frame)}\n    \n    return(filterdt)\n  })\n\n  #Select Bu name output BU Key\n\n  output$bureact<- renderText({\n    #bu<-budt[BU_NAME==input$BUNAME,BU_KEY]\n    \n    paste(\" BU Key :\",paste(bu,collapse = \",\"),sep=\"\")\n  })\n  \n  #list of H1L3 selection\n  H1L3 <- reactive({\n    #bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    vars <- unique(dt[order(PRODUCT_HIER_LVL1),PRODUCT_HIER_LVL1])\n    vars <- as.list(vars)\n    return(vars)\n  })\n  #select H1L3\n  output$H1L3 = renderUI({\n    selectInput(\"H1L3\", \"Product H1L3:\",H1L3()\n                ,multiple =TRUE)\n  })\n  \n  #list of H1L2 selection\n  H1L2 <- reactive({\n    #bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    vars <- unique(dt[PRODUCT_HIER_LVL1==input$H1L3 ,][order(PRODUCT_HIER_LVL2),PRODUCT_HIER_LVL2])\n    vars <- as.list(vars)\n    return(vars)\n  })\n  \n  #select H1L2\n  output$H1L2 = renderUI({\n    selectInput(\"H1L2\", \"Product H1L2:\",H1L2(),selected=H1L2()\n                ,multiple =TRUE)\n  })\n  \n  \n  #list of H1L1 selection\n  H1L1 <- reactive({\n    vars <- unique(dt[ PRODUCT_HIER_LVL1==input$H1L3 & PRODUCT_HIER_LVL2==input$H1L2,][order(PRODUCT_HIER_LVL3),PRODUCT_HIER_LVL3])\n    vars <- as.list(vars)\n    return(vars)\n  })\n  \n  #select H1L1\n  output$cat = renderUI({\n    selectInput(\"Cate\", \"Product H1L1:\",H1L1(),selected=H1L1()\n                ,multiple =TRUE)\n  })\n  #list of brand selection for BUBRAND and Brand\n  Brand <- reactive({\n\n    \n    vars <- product\n    return(vars)\n  })\n  \n  #Select Brand\n  output$brand = renderUI({\n    selectInput(\"Brand\", \":\",Brand()\n                )\n  })\n  Brand2 <- reactive({\n    \n    \n    vars <- unique(stathostpital[TYPE==input$Brand,'Operation..indexed.'])\n    return(vars)\n  })\n  \n  \n  output$brand2 = renderUI({\n    selectInput(\"Operations\", \":\",Brand2()\n    )\n  })\n  \n  \n  #Fit loess  Model\n  dtmodel<-reactive({\n    #if(datafinal()[,.N<=1000]){\n    fitloess <- loess(QTY ~ AVGPRICE, datafinal())\n    \n    # }\n    #else{fit <- mgcv::gam(formula = QTY ~ AVGPRICE, data = datafinal())}\n    \n    return(fitloess)\n  })\n  \n  #Fit predict loess Model\n  dtpred<-reactive({\n    #if(datafinal()[,.N<=1000])\n    #{\n    prediction<-predict(dtmodel(), data.frame(AVGPRICE=input$PRED))\n    # }\n    # else\n    # {prediction<-mgcv::predict.gam(dtmodel(), data = list(input$PRED))\n    #  }\n    \n    return(prediction)\n  })\n  \n  #Define plot method (non using)\n  plotmethod<-reactive({\n    #if(datafinal()[,.N<=1000])\n    #{\n    method<-\"loess\"\n    # }\n    #else if (datafinal()[,.N>1000])\n    #{method<-\"gam\"\n    #}\n    # else{\n    #method<-\"auto\"\n    #}\n    \n    return(method)\n  })\n  \n  #output prediction result of loess model for price input\n  output$prediction<-renderText({\n    \n    predfin<-ifelse(dtpred() <0 ,0 , dtpred())\n    paste(\"The LOESS Model sales prediction for price=\", input$PRED,\" is:\" ,predfin,sep=\"\")\n  })\n  #output prediction result of linear model for price input\n  output$lmprediction<-renderText({\n    fitlm<-lm(QTY ~ AVGPRICE, datafinal())\n    \n    prediction<-predict.lm(fitlm, data.frame(AVGPRICE=input$PRED))\n    predfin<-ifelse(prediction <0 ,0 , prediction)\n    paste(\"The Linear Regression Model sales prediction for price=\", input$PRED,\" is:\" ,predfin,sep=\"\")\n  })\n  #output prediction result of quadratic model  for price input\n  output$lm2prediction<-renderText({\n    fitlm2<-lm(QTY ~ poly(AVGPRICE,2), datafinal())\n    prediction<-predict.lm(fitlm2, data.frame(AVGPRICE=input$PRED))\n    predfin<-ifelse(prediction <0 ,0 , prediction)\n    paste(\"The Regression Model(Quadratic) sales prediction for price=\", input$PRED,\" is:\" ,predfin,sep=\"\")\n  })\n  \n  #Calculate elasticity (non using)\n  elast<-reactive({\n    \n    \n    predfin<-ifelse(dtpred() <0 ,0 , dtpred())\n    predictionlow<-predict(dtmodel(), data.frame(AVGPRICE=input$PRED-1))\n    predictionup<-predict(dtmodel(), data.frame(AVGPRICE=input$PRED+1))\n    \n    elasticup<-((predictionup-predfin)/(predictionup+predfin)*2)/((input$PRED+1-input$PRED)/(input$PRED+1+input$PRED)*2)\n    \n    fit <- lm(QTY ~ poly(AVGPRICE,2), data=datafinal())\n    \n    slope<-fit$coefficients[2]+fit$coefficients[3]*2*input$PRED\n    unitelastic<-(fit$coefficients[2]+1)/(fit$coefficients[3]*2)*-1*input$PRED/predfin\n    slightlyelastic<-(fit$coefficients[2]+0.75)/(fit$coefficients[3]*2)*-1*input$PRED/predfin\n    slightlyinelastic<-(fit$coefficients[2]+1.33333)/(fit$coefficients[3]*2)*-1*input$PRED/predfin\n    elast_ls<-list(predfin,predictionlow,predictionup,elasticup,fit,slope,unitelastic,slightlyelastic,slightlyinelastic)\n    return(elast_ls)\n    \n  }\n  )\n  \n  #output elasticity\n  output$elasticity<-renderText({\n    #fitlm2<-lm(QTY ~ poly(AVGPRICE,2), datafinal())\n    #prediction<-predict.lm(fitlm2, data.frame(AVGPRICE=input$PRED))\n    #predfin<-ifelse(prediction <0 ,0 , prediction)\n    #POE<-ifelse((elast()[6]*input$PRED/predfin)>0,0,(elast()[6]*input$PRED/predfin))\n    \n    \n    \n    maxprice<-unique(datafinal()[AVGPRICE==max(AVGPRICE),AVGPRICE])\n    minprice<-unique(datafinal()[AVGPRICE==min(AVGPRICE),AVGPRICE])\n    \n    fit <- lm(QTY ~ poly(AVGPRICE,2), datafinal())\n    maxquan<-predict(fit,data.frame(AVGPRICE=maxprice))\n    minquan<-predict(fit,data.frame(AVGPRICE=minprice))\n    \n    elasticlinear<-(maxquan-minquan)/(maxprice-minprice)*(maxprice+minprice)/(maxquan+minquan)\n    \n    \n    \n    if( elasticlinear > 1){\n      elast_def<-\"elastic\"\n    }\n    else if(elasticlinear == 1){\n      elast_def<-\"unit elasticity\"\n    }\n    else if ( elasticlinear < 1){\n      elast_def<-\"inelastic\"\n    }\n    else {\n      elast_def<-\"error\"\n    }\n    paste(\"The price elasticity for demand is:\",elast_def,sep=\"\")\n    \n    \n    \n    \n  })\n  \n  #Calculate unit elastic price (non using)\n  output$unitelasticity<-renderText({\n    paste(\"The unit elastic at price =\",elast()[7],sep=\"\")\n  })\n  #Calculate slightly elastic price (non using)\n  output$slinelastic<-renderText({\n    paste(\"The curve is slightly inelastic at price =\",elast()[8],sep=\"\")\n  })\n  #Calculate slightly ubelastic price (non using)\n  output$slelastic<-renderText({\n    paste(\"The curve is slightly elastic at price =\",elast()[9],sep=\"\")\n  })\n  \n  #output Product name\n  \n  output$product<-renderUI({\n    #bu<-budt[BU_NAME==input$BUNAME,BU_KEY] \n    \n    if(input$Selection == \"PK\"){\n      productname<-product[PRODUCT_ID==input$Product,c(PRODUCT_NAME)]\n      productkey<-unique(product[PRODUCT_ID==input$Product,PRODUCT_ID])\n      \n      listh1l3<-unique(product[PRODUCT_ID==input$Product,PRODUCT_HIER_LVL3])\n      listh1l2<-unique(product[PRODUCT_ID==input$Product,PRODUCT_HIER_LVL2])\n      listcat<-unique(product[PRODUCT_ID==input$Product,PRODUCT_HIER_LVL1])\n      brand<-unique(product[PRODUCT_ID==input$Product,BRAND_NAME])\n      #bu<-product[PRODUCT_KEY==input$Product,BU_KEY] \n      #buname<-budt[BU_KEY==bu,BU_NAME]\n      #sku<-unique(product[PRODUCT_KEY==input$Product,PRODUCT_SKU])\n      \n        product.name<-productname[1]\n      \n      HTML(paste(\"<b>\",\n      paste(\"The Price/QTY plot of \", product.name,sep=\"\"),\"</b>\",\n      \"<br>\",\"Product Key: \",productkey,\n      \"<br>\",\"Brand : \",brand,\n      \"<br>\",\"Sub-Class : \",listcat,\n      \"<br>\",\"Class : \",listh1l2,\n      \"<br>\",\"Department : \",listh1l3\n      \n      \n      ))\n    }\n    else if(input$Selection == \"Cat\"){\n      \n      listh1l3<-paste(input$H1L3,collapse=\",\")\n      listh1l2<-paste(input$H1L2,collapse=\",\")\n      listcat<-paste(input$Cate,collapse=\",\")\n      \n      \n      HTML(paste(\"The Price/QTY plot of products in Category:\",listh1l3,\" --> \",listh1l2, \" --> \", listcat,sep=\"\"))\n      \n    }\n    else if (input$Selection == \"Brand\"){\n      HTML(paste(\"The Price/QTY plot of products in Brand:\",  paste(input$Brand,collapse=\",\"),sep=\"\"))\n    }\n    \n    else {}\n    \n    \n    \n  })\n  \n  \n  \n  #Plot QTY vs AVGPRICE\n  output$plot1 <- renderPlot({\n    a<-datafinal()\n    ggplot(data=a[,c(1,14)], aes(colnames(dt)[1])) + geom_bar(weight=colnames(dt)[1])\n  })\n  \n  #Split data to season\n  datasplit<-reactive({\n    originaldt<-as.data.table(datafinal())\n    spring<-originaldt[WK>=1 & WK<=13]\n    summer<-originaldt[WK>=14 & WK<=27]\n    autumn<-originaldt[WK>=28 & WK<=40]\n    winter<-originaldt[WK>=41 & WK<=53]\n    dtlist<-list(spring,summer,autumn,winter)\n    return(dtlist)\n  })\n  \n  \n  \n  \n  \n}\n\n\nshinyApp(ui, server)\n\n",
    "created" : 1529734641781.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3399539938",
    "id" : "D2D1213B",
    "lastKnownWriteTime" : 1520234649,
    "last_content_update" : 1520234649,
    "path" : "C:/Users/Larry/Desktop/price_el/src/price shiny.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}